using UnityEngine;
using UnityEngine.UI;
using System.Linq;
using System.Collections.Generic;
using TMPro;

public class QuizManager : MonoBehaviour {
    public TMP_Text questionText;       // –¢–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º
    public Button[] answerButtons;  // 4 –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    private List<WordCard> wordCards;
    private WordCard currentWord;
    private int currentHSKLevel = 1;

    void Start() {
        wordCards = GetComponent<WordLoader>().wordCards;
        GenerateQuestion();
    }
    void GenerateQuestion() {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —É—Ä–æ–≤–Ω—é HSK
        var filteredWords = wordCards.Where(card => card.HSKLevel == currentHSKLevel).ToList();
        currentWord = filteredWords[Random.Range(0, filteredWords.Count)];

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –ø–∏–Ω—å–∏–Ω—å
        questionText.text = $"{currentWord.Chinese}";

        // –±–µ—Ä–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
        List<string> answers = new List<string>();
        answers.Add(currentWord.Translations[Random.Range(0, currentWord.Translations.Length)]);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        while (answers.Count < 4) {
            WordCard randomCard =  wordCards[Random.Range(0, wordCards.Count)];
            string randomAnswer = randomCard.Translations[Random.Range(0, randomCard.Translations.Length)];
            if (!answers.Contains(randomAnswer)) {
                answers.Add(randomAnswer);
            }
        }

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–Ω–æ–ø–∫–∞–º
        answers = answers.OrderBy(a => Random.value).ToList();
        for (int i = 0; i < answerButtons.Length; i++) {
            answerButtons[i].GetComponentInChildren<TMP_Text>().text = answers[i];
            answerButtons[i].onClick.RemoveAllListeners();
            string answer = answers[i];
            answerButtons[i].onClick.AddListener(() => CheckAnswer(answer));
        }
    }

    void CheckAnswer(string selectedAnswer) {
        bool isCorrect = currentWord.Translations.Contains(selectedAnswer);
        if (isCorrect) {
            Debug.Log("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ");
        } else {
            Debug.Log($"–û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {string.Join(" / ", currentWord.Translations)}");
        }
        GenerateQuestion(); // –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    }
}